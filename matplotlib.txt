variant	af	filter-pvalue	lrt-pvalue	beta	beta-std-err	variant_h2	notes
NC_007795.1_1000160_A_G	3.97E-01	5.57E-04	1.46E-01	8.91E-02	6.11E-02	5.94E-02	
NC_007795.1_1000252_AACAAAATGTA_GACATAAATATT	3.49E-02	6.22E-02	1.27E-01	1.61E-01	1.05E-01	6.22E-02	
NC_007795.1_1000502_GTGAT_TTGAC	3.65E-02	7.63E-02	1.58E-01	1.62E-01	1.15E-01	5.76E-02	
NC_007795.1_1000556_C_T	3.65E-02	7.63E-02	1.58E-01	1.62E-01	1.15E-01	5.76E-02	
NC_007795.1_100129_CCA_TCAC	7.14E-02	8.79E-03	1.34E-01	1.44E-01	9.58E-02	6.12E-02	
NC_007795.1_1001574_C_T	8.97E-02	9.74E-05	1.33E-01	7.83E-02	5.20E-02	6.14E-02	
NC_007795.1_100161_T_C	7.14E-02	8.79E-03	1.34E-01	1.44E-01	9.58E-02	6.12E-02	
NC_007795.1_10016_A_G	3.49E-02	6.22E-02	1.23E-01	1.65E-01	1.07E-01	6.29E-02	
NC_007795.1_100183_A_G	3.65E-02	7.63E-02	1.58E-01	1.62E-01	1.15E-01	5.76E-02	
NC_007795.1_100195_A_C	3.29E-01	5.11E-05	1.57E-02	1.21E-01	4.98E-02	9.85E-02	
NC_007795.1_100215_C_CA	7.31E-02	1.06E-02	1.66E-01	7.58E-02	5.47E-02	5.65E-02	

import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5]
y = [1, 4, 9, 16, 25]

plt.plot(x, y)
plt.show()

==========================
import pandas as pd
import matplotlib.pyplot as plt

# Read data from penicillin_snps.plot
data = pd.read_csv('penicillin_snps.plot', sep='\t')

# Plotting Manhattan plot
plt.figure(figsize=(10, 6))
plt.scatter(data['BP'], data['log10(p)'], color='blue', s=10)
plt.axhline(y=-math.log10(0.05), color='red', linestyle='dashed', linewidth=1)  # significance line
plt.xlabel('Genomic position')
plt.ylabel('-log10(p-value)')
plt.title('Manhattan Plot')
plt.show()
=========================
pip install pandas matplotlib
import pandas as pd
import matplotlib.pyplot as plt

# Replace 'output.csv' with the path to your Pyseer output file
data = pd.read_csv('output.csv')


# Convert p-values to -log10(p-value) to enhance visibility on the plot
data['-log10(pvalue)'] = -np.log10(data['pvalue'])

# Create a new column 'chr' if your data includes chromosome or contig information
# For simplicity, this example assumes all data belongs to the same chromosome
data['chr'] = 'chr1'

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))
ax.scatter(data['position'], data['-log10(pvalue)'], color='blue', s=10)  # s is the marker size
ax.set_xlabel('Genomic position')
ax.set_ylabel('-log10(p-value)')
ax.set_title('Manhattan Plot')
plt.axhline(y=-np.log10(0.05), color='red', linestyle='dashed', linewidth=1)  # significance line
plt.show()

# Assuming 'chr' is a column in your DataFrame
chromosomes = sorted(data['chr'].unique())
colors = ['red', 'blue', 'green', 'purple'] * (len(chromosomes) // 4 + 1)

for i, chrom in enumerate(chromosomes):
    chrom_data = data[data['chr'] == chrom]
    plt.scatter(chrom_data['position'], chrom_data['-log10(pvalue)'], color=colors[i], s=10, label=chrom)

plt.xlabel('Genomic position')
plt.ylabel('-log10(p-value)')
plt.title('Manhattan Plot Across Chromosomes')
plt.axhline(y=-np.log10(0.05), color='red', linestyle='dashed', linewidth=1)  # significance line
plt.legend(title='Chromosome')
plt.show()
